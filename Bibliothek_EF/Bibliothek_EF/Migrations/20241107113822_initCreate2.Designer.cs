// <auto-generated />
using System;
using Bibliothek_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bibliothek_EF.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20241107113822_initCreate2")]
    partial class initCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bibliothek_EF.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ISBN");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PUBLISHED_DATE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator<string>("ItemType").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Bibliothek_EF.BookDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int")
                        .HasColumnName("AVAILABLE_COPIES");

                    b.Property<int>("BorrowedCopies")
                        .HasColumnType("int")
                        .HasColumnName("BORROWED_COPIES");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_COPIES");

                    b.HasKey("Id");

                    b.ToTable("BOOK_DETAILS");
                });

            modelBuilder.Entity("Bibliothek_EF.BookLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DUE_DATE");

                    b.Property<int>("LibrarianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LOAN_DATE");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RETURN_DATE");

                    b.Property<int?>("ReturnLibrarianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("ReturnLibrarianId");

                    b.ToTable("BOOK_LOANS");
                });

            modelBuilder.Entity("Bibliothek_EF.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATEOFBIRTH");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LASTNAME");

                    b.HasKey("Id");

                    b.ToTable("PERSONS", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Bibliothek_EF.Biography", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("Biography");
                });

            modelBuilder.Entity("Bibliothek_EF.Fantasy", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("Fantasy");
                });

            modelBuilder.Entity("Bibliothek_EF.Mystery", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("Mystery");
                });

            modelBuilder.Entity("Bibliothek_EF.NonFiction", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("NonFiction");
                });

            modelBuilder.Entity("Bibliothek_EF.Novel", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("Novel");
                });

            modelBuilder.Entity("Bibliothek_EF.ScienceFiction", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("ScienceFiction");
                });

            modelBuilder.Entity("Bibliothek_EF.Textbook", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Book");

                    b.ToTable("BOOKS");

                    b.HasDiscriminator().HasValue("Textbook");
                });

            modelBuilder.Entity("Bibliothek_EF.Author", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Person");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("BIOGRAPHY");

                    b.ToTable("AUTHORS", (string)null);
                });

            modelBuilder.Entity("Bibliothek_EF.Customer", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Person");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("MEMBERSHIPDATE");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("Bibliothek_EF.Librarian", b =>
                {
                    b.HasBaseType("Bibliothek_EF.Person");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("EMPLOYEEID");

                    b.ToTable("LIBRARIANS", (string)null);
                });

            modelBuilder.Entity("Bibliothek_EF.Book", b =>
                {
                    b.HasOne("Bibliothek_EF.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Bibliothek_EF.BookDetails", b =>
                {
                    b.HasOne("Bibliothek_EF.Book", "Book")
                        .WithOne("BookDetails")
                        .HasForeignKey("Bibliothek_EF.BookDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bibliothek_EF.BookLoan", b =>
                {
                    b.HasOne("Bibliothek_EF.Book", "Book")
                        .WithMany("BookLoans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliothek_EF.Customer", "Customer")
                        .WithMany("BookLoans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliothek_EF.Librarian", "Librarian")
                        .WithMany()
                        .HasForeignKey("LibrarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliothek_EF.Librarian", "ReturnLibrarian")
                        .WithMany()
                        .HasForeignKey("ReturnLibrarianId");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Librarian");

                    b.Navigation("ReturnLibrarian");
                });

            modelBuilder.Entity("Bibliothek_EF.Author", b =>
                {
                    b.HasOne("Bibliothek_EF.Person", null)
                        .WithOne()
                        .HasForeignKey("Bibliothek_EF.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bibliothek_EF.Customer", b =>
                {
                    b.HasOne("Bibliothek_EF.Person", null)
                        .WithOne()
                        .HasForeignKey("Bibliothek_EF.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bibliothek_EF.Librarian", b =>
                {
                    b.HasOne("Bibliothek_EF.Person", null)
                        .WithOne()
                        .HasForeignKey("Bibliothek_EF.Librarian", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bibliothek_EF.Book", b =>
                {
                    b.Navigation("BookDetails")
                        .IsRequired();

                    b.Navigation("BookLoans");
                });

            modelBuilder.Entity("Bibliothek_EF.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bibliothek_EF.Customer", b =>
                {
                    b.Navigation("BookLoans");
                });
#pragma warning restore 612, 618
        }
    }
}
