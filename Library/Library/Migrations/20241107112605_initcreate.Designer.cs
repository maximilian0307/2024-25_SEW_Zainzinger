// <auto-generated />
using System;
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20241107112605_initcreate")]
    partial class initcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Library.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("BookType").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Library.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Library.Biography", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("Biography");
                });

            modelBuilder.Entity("Library.Fantasy", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("Fantasy");
                });

            modelBuilder.Entity("Library.Mystery", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("Mystery");
                });

            modelBuilder.Entity("Library.NonFiction", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("NonFiction");
                });

            modelBuilder.Entity("Library.Novel", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("Novel");
                });

            modelBuilder.Entity("Library.ScienceFiction", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("ScienceFiction");
                });

            modelBuilder.Entity("Library.Textbook", b =>
                {
                    b.HasBaseType("Library.Book");

                    b.HasDiscriminator().HasValue("Textbook");
                });

            modelBuilder.Entity("Library.Author", b =>
                {
                    b.HasBaseType("Library.Person");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Library.Customer", b =>
                {
                    b.HasBaseType("Library.Person");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("date");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Library.Librarian", b =>
                {
                    b.HasBaseType("Library.Person");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.ToTable("Librarians", (string)null);
                });

            modelBuilder.Entity("Library.Author", b =>
                {
                    b.HasOne("Library.Person", null)
                        .WithOne()
                        .HasForeignKey("Library.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Customer", b =>
                {
                    b.HasOne("Library.Person", null)
                        .WithOne()
                        .HasForeignKey("Library.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Librarian", b =>
                {
                    b.HasOne("Library.Person", null)
                        .WithOne()
                        .HasForeignKey("Library.Librarian", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
